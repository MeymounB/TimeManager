name: Build

# Actions are set on main because these workflows cannot run on epitech repository so we avoid running them for nothing
on:
  push:
    branches: [ _master ]
  pull_request:
    branches: [ _master ]


jobs:
  build:
    name: Build images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build api and front images
        run: docker-compose build

      - name: Tag and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}/time_manager
        run: |
          docker tag timemanager_api $REGISTRY:api
          docker tag timemanager_web $REGISTRY:web
          docker push $REGISTRY:api
          docker push $REGISTRY:web

  deploy:
    name: "Deploy containers"
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Update docker-compose version
        run: curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh

      - name: Create ECS docker context
        run: |
          docker context create ecs ecscontext --from-env
          docker context use ecscontext

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update docker-compose.yml to aws images
        run: |
          sed -i 's/build: \.\/api/image: $REGISTRY:api/' docker-compose.yml
          sed -i 's/build: \.\/front/image: $REGISTRY:web/' docker-compose.yml
          sed -i 's/localhost/${{secrets.AWS_DNS_NAME}}/'   docker-compose.yml

      - name: Convert docker compose to cloud formation
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}/time_manager
          DnsRecord: |
            DNSRecord:
                Type: AWS::Route53::RecordSet
                Properties:
                  HostedZoneId: ${{ secrets.AWS_DNS_ZONE_ID }} # Specify your hosted zone ID
                  Name: ${{secrets.AWS_DNS_NAME}}
                  Type: A
                  AliasTarget:
                    DNSName: !GetAtt LoadBalancer.DNSName
                    HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        continue-on-error: true
        run: |
          docker compose convert > template.yml
          echo "  $DnsRecord" >> template.yml

      - name: Check if the stack exists
        run: |
          stack_status=$(aws cloudformation describe-stacks --stack-name ${{secrets.CF_STACK_NAME}} --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "DOES_NOT_EXIST")
          echo "Current status is $stack_status"
          
          if [[ "$stack_status" =~ .*"_IN_PROGRESS".* ]]; then
            echo "The stack is already in progress. Failing the workflow."
            exit 1
          fi
          
          if [ "$stack_status" = "DOES_NOT_EXIST" ] || [ "$stack_status" = "ROLLBACK_COMPLETE" ]; then
            if [ "$stack_status" = "ROLLBACK_COMPLETE" ]; then
              echo "The stack failed previously, delete it"
              aws cloudformation delete-stack --stack-name ${{secrets.CF_STACK_NAME}}
            fi
            echo "Create the stack"
            aws cloudformation create-stack --stack-name ${{secrets.CF_STACK_NAME}} --capabilities CAPABILITY_NAMED_IAM --template-body file://template.yml
            echo "Wait stack creation"
            aws cloudformation wait stack-create-complete --stack-name ${{secrets.CF_STACK_NAME}}
          else
            echo "Update the stack"
            aws cloudformation update-stack --stack-name ${{secrets.CF_STACK_NAME}} --capabilities CAPABILITY_NAMED_IAM --template-body file://template.yml
            echo "Wait stack update"
            aws cloudformation wait stack-update-complete --stack-name ${{secrets.CF_STACK_NAME}}
          fi
